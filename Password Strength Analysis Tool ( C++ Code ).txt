#include <iostream>
#include <string>
#include <ctime>
#include <cmath>
using namespace std;

struct PasswordHistory {
    string date, strength, password;
};

PasswordHistory passwordHistory[100];
int historyCount = 0;

void addPasswordHistory(const string& strength, const string& password) {
    time_t now = time(0);
    passwordHistory[historyCount++] = {ctime(&now), strength, password};
}

void displayPasswordHistory() {
    cout << "\n🗝️ Password History:\n\n";
    for (int i = 0; i < historyCount; ++i) {
        cout << "📅 Date: " << passwordHistory[i].date;
        cout << "🔒 Strength: " << passwordHistory[i].strength << "\n";
        cout << "🔑 Password: " << passwordHistory[i].password << "\n\n";
    }
}

void displaySecurityTips() {
    cout << "\n🛡️ Security Tips:\n";
    cout << "- Use a mix of uppercase, lowercase, digits, and special characters.\n";
    cout << "- Avoid common words and phrases.\n";
    cout << "- Do not reuse passwords across multiple sites.\n";
    cout << "- Change your passwords regularly.\n";
}

bool contains(const string& password, const string& chars) {
    for (char ch : password) if (chars.find(ch) != string::npos) return true;
    return false;
}

string generateStrongPassword(int length) {
    const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
    string password;
    srand(time(0));
    while (password.length() < length) password += chars[rand() % chars.size()];
    return password;
}

double calculateEntropy(const string& password) {
    int poolSize = (contains(password, "ABCDEFGHIJKLMNOPQRSTUVWXYZ") ? 26 : 0)
                 + (contains(password, "abcdefghijklmnopqrstuvwxyz") ? 26 : 0)
                 + (contains(password, "0123456789") ? 10 : 0)
                 + (contains(password, "!@#$%^&*") ? 32 : 0);
    return password.size() * log2(poolSize);
}

bool isCommonPassword(const string& password) {
    const string common[] = {"password", "123456", "123456789", "qwerty", "abc123"};
    for (const string& p : common) if (password == p) return true;
    return false;
}

void suggestImprovements(bool hasUpper, bool hasLower, bool hasDigit, bool hasSpecial) {
    if (!hasUpper) cout << "Consider adding an uppercase letter (A-Z).\n";
    if (!hasLower) cout << "Consider adding a lowercase letter (a-z).\n";
    if (!hasDigit) cout << "Consider adding a digit (0-9).\n";
    if (!hasSpecial) cout << "Consider adding a special character (!, @, #, etc.).\n";
}

void checkPasswordStrength(const string& password, int minLength) {
    bool hasUpper = contains(password, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"), hasLower = contains(password, "abcdefghijklmnopqrstuvwxyz");
    bool hasDigit = contains(password, "0123456789"), hasSpecial = contains(password, "!@#$%^&*");
    int criteriaMet = (password.length() >= minLength) + hasUpper + hasLower + hasDigit + hasSpecial;
    
    cout << "🔒 Password Strength: " << string(criteriaMet, '#') + string(5 - criteriaMet, '-') << " " 
         << (criteriaMet == 5 ? "Strong" : criteriaMet >= 3 ? "Moderate" : "Weak") << "\n";
    cout << "📊 Password Entropy: " << calculateEntropy(password) << " bits\n";
    if (isCommonPassword(password)) cout << "⚠️ Your password is too common. Consider choosing a more unique password.\n";
    if (criteriaMet < 5) {
        suggestImprovements(hasUpper, hasLower, hasDigit, hasSpecial);
        string response;
        while (true) {
            cout << "🤖 Would you like a randomly generated strong password? (yes/no): ";
            cin >> response;
            for (char& c : response) c = tolower(c);
            if (response == "yes") {
                cout << "🎲 Generated strong password: " << generateStrongPassword(minLength) << "\n";
                break;
            } else if (response == "no") {
                cout << "Thank you!\n";
                break;
            } else {
                cout << "❌ Invalid option. Please enter 'yes' or 'no'.\n";
            }
        }
    }
    addPasswordHistory(criteriaMet == 5 ? "Strong" : criteriaMet >= 3 ? "Moderate" : "Weak", password);
}

int main() {
    int minLength = 8, choice;
    string password;

    cout << "Enter your password to check its strength: "; cin >> password;
    checkPasswordStrength(password, minLength);

    while (true) {
        cout << "\nMenu:\n1. Check Another Password\n2. View Password History\n3. See Security Tips\n4. Exit\nEnter your choice: "; cin >> choice;

        if (choice < 1 || choice > 4) {
            cin.clear(); cin.ignore(10000, '\n');
            cout << "Invalid option. Please enter a valid choice.\n"; 
            continue;
        }

        switch (choice) {
            case 1:
                cout << "\nEnter your password to check its strength: "; cin >> password;
                checkPasswordStrength(password, minLength); break;
            case 2:
                displayPasswordHistory(); break;
            case 3:
                displaySecurityTips(); break;
            case 4:
                cout << "Thank you!\n"; return 0;
        }
    }
}
